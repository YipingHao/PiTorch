#include"../header/Pikachu.h"
#include"../../extern/lexical/dictionary.h"
#ifndef _uintMax_
#define _uintMax_ 0xffffffffffffffff
#endif
namespace LP
{
    struct Lfunc
    {
        enum regular
        {
            _id_ = 1,
            _integer_ = 2,
            _realC_ = 3,
            _funct_ = 4,
            _manifold_ = 5,
            _function_ = 6,
            _manif_ = 7,
            _def_ = 8,
            _input_ = 9,
            _output_ = 10,
            _para_ = 11,
            _real_ = 12,
            _sint_ = 13,
            _uint_ = 14,
            _return_ = 15,
            _for_ = 16,
            _if_ = 17,
            _else_ = 18,
            _sin_ = 19,
            _cos_ = 20,
            _exp_ = 21,
            _ln_ = 22,
            _log_ = 23,
            _sqrt_ = 24,
            _pow_ = 25,
            _spaces_ = 26,
            _enters_ = 27,
            _tab_ = 28,
            _semicolon_ = 29,
            _colon_ = 30,
            _dot_ = 31,
            _comma_ = 32,
            _braceL_ = 33,
            _braceR_ = 34,
            _left_ = 35,
            _right_ = 36,
            _squareL_ = 37,
            _squareR_ = 38,
            _angleL_ = 39,
            _angleR_ = 40,
            _anntationS_ = 41,
            _anntationM_ = 42,
            _sub_ = 43,
            _add_ = 44,
            _multi_ = 45,
            _div_ = 46,
            _value_ = 47
        };
        enum group
        {
            _id___ = 1,
            _number___ = 2,
            _reserved___ = 3,
            _function1___ = 4,
            _function2___ = 5,
            _format___ = 6,
            _division___ = 7,
            _braket___ = 8,
            _anntation___ = 9,
            _operation___ = 10,
            _value___ = 11
        };
        static int next(int state, const char c);
        static int action(int state);
        static int GroupGet(int state);
    };
    struct Pfunc
    {
        enum type
        {
            accept = 0,
            error = 1,
            push = 2,
            reduce = 3
        };
        enum nonterminal
        {
            _all_ = 0,
            _FUNCTION_ = 1,
            _MANIFPARAS_ = 2,
            _MANIFPARA_ = 3,
            _FUNCTWORD_ = 4,
            _MANIFBODY_ = 5,
            _DELARATIONS_ = 6,
            _DELARATION_ = 7,
            _RETURN_ = 8,
            _EXPRESSIONS_ = 9,
            _EXPRESSION_ = 10,
            _EXP_RIGHT_ = 11,
            _EXP_MUL_ = 12,
            _EXP_MINUS_ = 13,
            _UNIT_ = 14,
            _CONST_ = 15,
            _ID_ = 16,
            _CALL_ = 17,
            _FUNCT_NAME_ = 18
        };
        enum rules
        {
            _all_all_ = 0,
            _FUNCTION_FUNCTION_ = 1,
            _MANIFPARAS_multi_ = 2,
            _MANIFPARAS_single_ = 3,
            _MANIFPARA_paras_ = 4,
            _MANIFPARA_para_ = 5,
            _MANIFPARA_input_ = 6,
            _FUNCTWORD_funct_ = 7,
            _FUNCTWORD_function_ = 8,
            _MANIFBODY_indirect_ = 9,
            _MANIFBODY_direct_ = 10,
            _DELARATIONS_multi_ = 11,
            _DELARATIONS_single_ = 12,
            _DELARATION_multi_ = 13,
            _DELARATION_single_ = 14,
            _RETURN_RETURN_ = 15,
            _EXPRESSIONS_multi_ = 16,
            _EXPRESSIONS_single_ = 17,
            _EXPRESSION_EXPRESSION_ = 18,
            _EXP_RIGHT_sub_ = 19,
            _EXP_RIGHT_add_ = 20,
            _EXP_RIGHT_single_ = 21,
            _EXP_MUL_div_ = 22,
            _EXP_MUL_multi_ = 23,
            _EXP_MUL_single_ = 24,
            _EXP_MINUS_minus_ = 25,
            _EXP_MINUS_plus_ = 26,
            _EXP_MINUS_single_ = 27,
            _UNIT_complex_ = 28,
            _UNIT_const_ = 29,
            _UNIT_call_ = 30,
            _UNIT_id_ = 31,
            _CONST_real_ = 32,
            _CONST_integer_ = 33,
            _ID_single_ = 34,
            _ID_array_ = 35,
            _CALL_call_2_ = 36,
            _CALL_call_1_ = 37,
            _FUNCT_NAME_pow_ = 38,
            _FUNCT_NAME_sqrt_ = 39,
            _FUNCT_NAME_log_ = 40,
            _FUNCT_NAME_ln_ = 41,
            _FUNCT_NAME_exp_ = 42,
            _FUNCT_NAME_cos_ = 43,
            _FUNCT_NAME_sin_ = 44,
            _FUNCT_NAME_id_ = 45
        };
        static const size_t StateCount;
        static const size_t NonTerminalCount;
        static const size_t TerminalCount;
        static const size_t RulesCount;
        static const int GOTO[86][19];
        static const int ACTION[86][48];
        static const int RulesToSymbol[46];
        static const int RulesLength[46];
        static const char* const RulesName[46];
    };
}
namespace Rtensor
{
    struct lexer
    {
        enum regular
        {
            _id_ = 1,
            _integer_ = 2,
            _real_ = 3,
            _enters_ = 4,
            _spaces_ = 5,
            _tab_ = 6,
            _semicolon_ = 7,
            _colon_ = 8,
            _dot_ = 9
        };
        enum group
        {
            _id___ = 1,
            _number___ = 2,
            _enters___ = 3,
            _format___ = 4,
            _division___ = 5
        };
        static int next(int state, const char c);
        static int action(int state);
        static int GroupGet(int state);
    };
}

int Pikachu::matrixGet(FILE* fp, vector<double>& output, size_t& row, size_t& column)
{
    int error, state;
    size_t i;
    double temp;
    hyperlex::Morpheme eme;
    size_t record;
    state = 0;
    record = 0;
    error = eme.Build<Rtensor::lexer>(fp);
    row = 0;
    if (error != 0) return error;
    for (i = 0; i < eme.GetCount(); i++)
    {
        if (eme[i].accept == Rtensor::lexer::regular::_real_)
        {
            temp = eme.GetReal(i);
            output.append(temp);
            if (state == 0) state = 1;
            record += 1;
        }
        else if (eme[i].accept == Rtensor::lexer::regular::_enters_)
        {
            if (state == 1)
            {
                column = record;
                record = 0;
                state = 2;
                row += 1;
            }
            else if (state == 2)
            {
                if (column != record) error = (int)eme[i].line;
                record = 0;
                row += 1;
            }
        }
    }
    return error;
}
int Pikachu::vectorGet(FILE* fp, vector<double>& output)
{
    int error;
    size_t i;
    double temp;
    hyperlex::Morpheme eme;
    error = eme.Build<Rtensor::lexer>(fp);
    if (error != 0) return error;
    for (i = 0; i < eme.GetCount(); i++)
    {
        if (eme[i].accept == Rtensor::lexer::regular::_real_)
        {
            temp = eme.GetReal(i);
            output.append(temp);
        }
    }
    return error;
}

namespace Rtensor
{
    int lexer::next(int state, const char c)
    {
        switch (state)
        {
        case 0:
            if (c == (char)9) return 6;
            else if (c == (char)10) return 4;
            else if (c == ' ') return 5;
            else if (c == '+') return 10;
            else if (c == '-') return 10;
            else if (c == '.') return 9;
            else if ('0' <= c && c <= '9') return 2;
            else if (c == ':') return 8;
            else if (c == ';') return 7;
            else if ('A' <= c && c <= 'Z') return 1;
            else if (c == '_') return 1;
            else if ('a' <= c && c <= 'z') return 1;
            else return 0;
        case 1:
            if ('0' <= c && c <= '9') return 1;
            else if ('A' <= c && c <= 'Z') return 1;
            else if (c == '_') return 1;
            else if ('a' <= c && c <= 'z') return 1;
            else return 0;
        case 2:
            if (c == '.') return 13;
            else if ('0' <= c && c <= '9') return 2;
            else return 0;
        case 3:
            if ('0' <= c && c <= '9') return 3;
            else if (c == 'E') return 12;
            else if (c == 'e') return 12;
            else return 0;
        case 4:
            if (c == (char)10) return 4;
            else return 0;
        case 5:
            if (c == ' ') return 5;
            else return 0;
        case 6:
            return 0;
        case 7:
            return 0;
        case 8:
            return 0;
        case 9:
            return 0;
        case 10:
            if ('0' <= c && c <= '9') return 2;
            else return 0;
        case 11:
            if ('0' <= c && c <= '9') return 11;
            else return 0;
        case 12:
            if (c == '+') return 14;
            else if (c == '-') return 14;
            else if ('0' <= c && c <= '9') return 11;
            else return 0;
        case 13:
            if ('0' <= c && c <= '9') return 3;
            else return 0;
        case 14:
            if ('0' <= c && c <= '9') return 11;
            else return 0;
        }
        return 0;
    }
    int lexer::action(int state)
    {
        switch (state)
        {
        case 1:
            return 1;//id: id
        case 2:
            return 2;//number: integer
        case 3:
            return 3;//number: real
        case 4:
            return 4;//enters: enters
        case 5:
            return 5;//format: spaces
        case 6:
            return 6;//format: tab
        case 7:
            return 7;//division: semicolon
        case 8:
            return 8;//division: colon
        case 9:
            return 9;//division: dot
        case 11:
            return 3;//number: real
        }
        return 0;
    }
    int lexer::GroupGet(int accept)
    {
        switch (accept)
        {
        case 1:
            return 1;//id: id
        case 2:
            return 2;//number: integer
        case 3:
            return 2;//number: real
        case 4:
            return 3;//enters: enters
        case 5:
            return 4;//format: spaces
        case 6:
            return 4;//format: tab
        case 7:
            return 5;//division: semicolon
        case 8:
            return 5;//division: colon
        case 9:
            return 5;//division: dot
        }
        return 0;
    }
}
namespace LP
{ 
const size_t Pfunc::StateCount = 86;
const size_t Pfunc::NonTerminalCount = 19;
const size_t Pfunc::TerminalCount = 47;
const size_t Pfunc::RulesCount = 46;
const int Pfunc::GOTO[86][19] = { \
{1, 6, 1, 1, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 26, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 342, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 74, 78, 82, 1, 86, 90, 1, 1, 1, 1, 1, 94, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 326, 1, 330, 90, 1, 1, 1, 1, 1, 94, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 306, 1, 310, 1, 1, 1, 1, 1, 94, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 146, 150, 154, 158, 162, 166, 170, 174}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 238, 150, 154, 158, 162, 166, 170, 174}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 234, 162, 166, 170, 174}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 230, 162, 166, 170, 174}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 274, 154, 158, 162, 166, 170, 174}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 254, 154, 158, 162, 166, 170, 174}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 270, 158, 162, 166, 170, 174}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 266, 158, 162, 166, 170, 174}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 282, 150, 154, 158, 162, 166, 170, 174}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 294, 150, 154, 158, 162, 166, 170, 174}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 318, 150, 154, 158, 162, 166, 170, 174}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 334, 1, 310, 1, 1, 1, 1, 1, 94, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1} };
//==============================
const int Pfunc::ACTION[86][48] = { \
{1, 1, 1, 1, 14, 1, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 31, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 34, 1, 38, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 62, 1, 1, 1, 66, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 58, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 42, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 23, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 50, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 27, 1, 1, 1, 27, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 34, 1, 38, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 70, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 98, 1, 1, 1, 1, 1, 1, 102, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 338, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 98, 1, 1, 1, 1, 1, 1, 102, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 51, 1, 1, 1, 1, 1, 1, 51, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 98, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 314, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 71, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 71, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 142}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 139, 1, 1, 139, 1, 1, 1, 139, 130, 1, 1, 1, 1, 1, 139, 139, 139, 139, 139}, \
{1, 106, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 110, 1, 1, 1, 1, 1, 1, 1, 114, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 59, 1, 1, 1, 1, 1, 1, 59, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 118, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 122, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 126, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 55, 1, 1, 1, 1, 1, 1, 55, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 134, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 138, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 143, 1, 1, 143, 1, 1, 1, 143, 1, 1, 1, 1, 1, 1, 143, 143, 143, 143, 143}, \
{1, 178, 182, 186, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 190, 194, 198, 202, 206, 210, 214, 1, 1, 1, 1, 1, 1, 1, 1, 1, 218, 1, 1, 1, 1, 1, 1, 1, 222, 226, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 302, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 246, 250, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 87, 1, 1, 87, 1, 1, 1, 87, 1, 1, 1, 1, 1, 1, 87, 87, 258, 262, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 99, 1, 1, 99, 1, 1, 1, 99, 1, 1, 1, 1, 1, 1, 99, 99, 99, 99, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 111, 1, 1, 111, 1, 1, 1, 111, 1, 1, 1, 1, 1, 1, 111, 111, 111, 111, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 119, 1, 1, 119, 1, 1, 1, 119, 1, 1, 1, 1, 1, 1, 119, 119, 119, 119, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 127, 1, 1, 127, 1, 1, 1, 127, 1, 1, 1, 1, 1, 1, 127, 127, 127, 127, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 123, 1, 1, 123, 1, 1, 1, 123, 1, 1, 1, 1, 1, 1, 123, 123, 123, 123, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 278, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 139, 1, 1, 139, 1, 1, 183, 139, 130, 1, 1, 1, 1, 1, 139, 139, 139, 139, 139}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 135, 1, 1, 135, 1, 1, 1, 135, 1, 1, 1, 1, 1, 1, 135, 135, 135, 135, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 131, 1, 1, 131, 1, 1, 1, 131, 1, 1, 1, 1, 1, 1, 131, 131, 131, 131, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 179, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 175, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 171, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 167, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 163, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 159, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 155, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 178, 182, 186, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 190, 194, 198, 202, 206, 210, 214, 1, 1, 1, 1, 1, 1, 1, 1, 1, 218, 1, 1, 1, 1, 1, 1, 1, 222, 226, 1, 1, 1}, \
{1, 178, 182, 186, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 190, 194, 198, 202, 206, 210, 214, 1, 1, 1, 1, 1, 1, 1, 1, 1, 218, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 178, 182, 186, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 190, 194, 198, 202, 206, 210, 214, 1, 1, 1, 1, 1, 1, 1, 1, 1, 218, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 107, 1, 1, 107, 1, 1, 1, 107, 1, 1, 1, 1, 1, 1, 107, 107, 107, 107, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 103, 1, 1, 103, 1, 1, 1, 103, 1, 1, 1, 1, 1, 1, 103, 103, 103, 103, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 242, 1, 1, 1, 1, 1, 1, 246, 250, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 115, 1, 1, 115, 1, 1, 1, 115, 1, 1, 1, 1, 1, 1, 115, 115, 115, 115, 1}, \
{1, 178, 182, 186, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 190, 194, 198, 202, 206, 210, 214, 1, 1, 1, 1, 1, 1, 1, 1, 1, 218, 1, 1, 1, 1, 1, 1, 1, 222, 226, 1, 1, 1}, \
{1, 178, 182, 186, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 190, 194, 198, 202, 206, 210, 214, 1, 1, 1, 1, 1, 1, 1, 1, 1, 218, 1, 1, 1, 1, 1, 1, 1, 222, 226, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 83, 1, 1, 83, 1, 1, 1, 83, 1, 1, 1, 1, 1, 1, 83, 83, 258, 262, 1}, \
{1, 178, 182, 186, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 190, 194, 198, 202, 206, 210, 214, 1, 1, 1, 1, 1, 1, 1, 1, 1, 218, 1, 1, 1, 1, 1, 1, 1, 222, 226, 1, 1, 1}, \
{1, 178, 182, 186, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 190, 194, 198, 202, 206, 210, 214, 1, 1, 1, 1, 1, 1, 1, 1, 1, 218, 1, 1, 1, 1, 1, 1, 1, 222, 226, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 91, 1, 1, 91, 1, 1, 1, 91, 1, 1, 1, 1, 1, 1, 91, 91, 91, 91, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 95, 1, 1, 95, 1, 1, 1, 95, 1, 1, 1, 1, 1, 1, 95, 95, 95, 95, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 79, 1, 1, 79, 1, 1, 1, 79, 1, 1, 1, 1, 1, 1, 79, 79, 258, 262, 1}, \
{1, 178, 182, 186, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 190, 194, 198, 202, 206, 210, 214, 1, 1, 1, 1, 1, 1, 1, 1, 1, 218, 1, 1, 1, 1, 1, 1, 1, 222, 226, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 286, 1, 1, 1, 290, 1, 1, 1, 1, 1, 1, 246, 250, 1, 1, 1}, \
{1, 178, 182, 186, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 190, 194, 198, 202, 206, 210, 214, 1, 1, 1, 1, 1, 1, 1, 1, 1, 218, 1, 1, 1, 1, 1, 1, 1, 222, 226, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 151, 1, 1, 151, 1, 1, 1, 151, 1, 1, 1, 1, 1, 1, 151, 151, 151, 151, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 298, 1, 1, 1, 1, 1, 1, 246, 250, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 147, 1, 1, 147, 1, 1, 1, 147, 1, 1, 1, 1, 1, 1, 147, 147, 147, 147, 1}, \
{1, 75, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 75, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 67, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 67, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 178, 182, 186, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 190, 194, 198, 202, 206, 210, 214, 1, 1, 1, 1, 1, 1, 1, 1, 1, 218, 1, 1, 1, 1, 1, 1, 1, 222, 226, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 322, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 246, 250, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 63, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 47, 1, 1, 1, 1, 1, 1, 47, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 98, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 314, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 39, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, \
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1} };
//==============================
const int Pfunc::RulesToSymbol[46] = { \
0,\
1,\
2,\
2,\
3,\
3,\
3,\
4,\
4,\
5,\
5,\
6,\
6,\
7,\
7,\
8,\
9,\
9,\
10,\
11,\
11,\
11,\
12,\
12,\
12,\
13,\
13,\
13,\
14,\
14,\
14,\
14,\
15,\
15,\
16,\
16,\
17,\
17,\
18,\
18,\
18,\
18,\
18,\
18,\
18,\
18 };
//==============================
const int Pfunc::RulesLength[46] = { \
1,\
7,\
3,\
1,\
5,\
2,\
2,\
1,\
1,\
3,\
2,\
2,\
1,\
6,\
3,\
3,\
2,\
1,\
4,\
3,\
3,\
1,\
3,\
3,\
1,\
2,\
2,\
1,\
3,\
1,\
1,\
1,\
1,\
1,\
1,\
4,\
6,\
4,\
1,\
1,\
1,\
1,\
1,\
1,\
1,\
1 };
//==============================
const char* const Pfunc::RulesName[46] = { \
"all->FUNCTION ",\
"FUNCTION->FUNCTWORD left MANIFPARAS right braceL MANIFBODY braceR ",\
"MANIFPARAS->MANIFPARAS comma MANIFPARA ",\
"MANIFPARAS->MANIFPARA ",\
"MANIFPARA->para id squareL integer squareR ",\
"MANIFPARA->para id ",\
"MANIFPARA->input id ",\
"FUNCTWORD->funct ",\
"FUNCTWORD->function ",\
"MANIFBODY->DELARATIONS EXPRESSIONS RETURN ",\
"MANIFBODY->EXPRESSIONS RETURN ",\
"DELARATIONS->DELARATIONS DELARATION ",\
"DELARATIONS->DELARATION ",\
"DELARATION->def id squareL integer squareR semicolon ",\
"DELARATION->def id semicolon ",\
"RETURN->return EXP_RIGHT semicolon ",\
"EXPRESSIONS->EXPRESSIONS EXPRESSION ",\
"EXPRESSIONS->EXPRESSION ",\
"EXPRESSION->ID value EXP_RIGHT semicolon ",\
"EXP_RIGHT->EXP_RIGHT sub EXP_MUL ",\
"EXP_RIGHT->EXP_RIGHT add EXP_MUL ",\
"EXP_RIGHT->EXP_MUL ",\
"EXP_MUL->EXP_MUL div EXP_MINUS ",\
"EXP_MUL->EXP_MUL multi EXP_MINUS ",\
"EXP_MUL->EXP_MINUS ",\
"EXP_MINUS->sub UNIT ",\
"EXP_MINUS->add UNIT ",\
"EXP_MINUS->UNIT ",\
"UNIT->left EXP_RIGHT right ",\
"UNIT->CONST ",\
"UNIT->CALL ",\
"UNIT->ID ",\
"CONST->realC ",\
"CONST->integer ",\
"ID->id ",\
"ID->id squareL integer squareR ",\
"CALL->FUNCT_NAME left EXP_RIGHT comma EXP_RIGHT right ",\
"CALL->FUNCT_NAME left EXP_RIGHT right ",\
"FUNCT_NAME->pow ",\
"FUNCT_NAME->sqrt ",\
"FUNCT_NAME->log ",\
"FUNCT_NAME->ln ",\
"FUNCT_NAME->exp ",\
"FUNCT_NAME->cos ",\
"FUNCT_NAME->sin ",\
"FUNCT_NAME->id " };
int Lfunc::next(int state, const char c)
{
    switch (state)
    {
    case 0:
        if (c == (char)9) return 28;
        else if (c == (char)10) return 27;
        else if (c == ' ') return 26;
        else if (c == '(') return 35;
        else if (c == ')') return 36;
        else if (c == '*') return 45;
        else if (c == '+') return 44;
        else if (c == ',') return 32;
        else if (c == '-') return 43;
        else if (c == '.') return 31;
        else if (c == '/') return 46;
        else if ('0' <= c && c <= '9') return 2;
        else if (c == ':') return 30;
        else if (c == ';') return 29;
        else if (c == '<') return 39;
        else if (c == '=') return 47;
        else if (c == '>') return 40;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '[') return 37;
        else if (c == ']') return 38;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'b') return 1;
        else if (c == 'c') return 69;
        else if (c == 'd') return 53;
        else if (c == 'e') return 68;
        else if (c == 'f') return 66;
        else if ('g' <= c && c <= 'h') return 1;
        else if (c == 'i') return 52;
        else if ('j' <= c && c <= 'k') return 1;
        else if (c == 'l') return 59;
        else if (c == 'm') return 60;
        else if (c == 'n') return 1;
        else if (c == 'o') return 78;
        else if (c == 'p') return 65;
        else if (c == 'q') return 1;
        else if (c == 'r') return 58;
        else if (c == 's') return 61;
        else if (c == 't') return 1;
        else if (c == 'u') return 73;
        else if ('v' <= c && c <= 'z') return 1;
        else if (c == '{') return 33;
        else if (c == '}') return 34;
        else return 0;
    case 1:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 2:
        if (c == '.') return 48;
        else if ('0' <= c && c <= '9') return 2;
        else return 0;
    case 3:
        if ('0' <= c && c <= '9') return 3;
        else if (c == 'E') return 82;
        else if (c == 'e') return 82;
        else return 0;
    case 4:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'h') return 1;
        else if (c == 'i') return 62;
        else if ('j' <= c && c <= 'z') return 1;
        else return 0;
    case 5:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 6:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 7:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'n') return 1;
        else if (c == 'o') return 85;
        else if ('p' <= c && c <= 'z') return 1;
        else return 0;
    case 8:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 9:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 10:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 11:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 12:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 13:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 14:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 15:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 16:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 17:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 18:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 19:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 's') return 1;
        else if (c == 't') return 13;
        else if ('u' <= c && c <= 'z') return 1;
        else return 0;
    case 20:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 21:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 22:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 23:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 24:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 25:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'z') return 1;
        else return 0;
    case 26:
        if (c == ' ') return 26;
        else return 0;
    case 27:
        if (c == (char)10) return 27;
        else return 0;
    case 28:
        return 0;
    case 29:
        return 0;
    case 30:
        return 0;
    case 31:
        return 0;
    case 32:
        return 0;
    case 33:
        return 0;
    case 34:
        return 0;
    case 35:
        return 0;
    case 36:
        return 0;
    case 37:
        return 0;
    case 38:
        return 0;
    case 39:
        return 0;
    case 40:
        return 0;
    case 41:
        return 0;
    case 42:
        if ((char)0 <= c && c <= ')') return 81;
        else if (c == '*') return 93;
        else if ('+' <= c && c <= (char)127) return 81;
        else return 0;
    case 43:
        if ('0' <= c && c <= '9') return 2;
        else return 0;
    case 44:
        if ('0' <= c && c <= '9') return 2;
        else return 0;
    case 45:
        return 0;
    case 46:
        if (c == '*') return 81;
        else if (c == '/') return 92;
        else return 0;
    case 47:
        return 0;
    case 48:
        if ('0' <= c && c <= '9') return 3;
        else return 0;
    case 49:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if (c == 'a') return 11;
        else if ('b' <= c && c <= 'z') return 1;
        else return 0;
    case 50:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'c') return 1;
        else if (c == 'd') return 5;
        else if ('e' <= c && c <= 'z') return 1;
        else return 0;
    case 51:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'd') return 1;
        else if (c == 'e') return 18;
        else if ('f' <= c && c <= 'z') return 1;
        else return 0;
    case 52:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'e') return 1;
        else if (c == 'f') return 17;
        else if ('g' <= c && c <= 'm') return 1;
        else if (c == 'n') return 101;
        else if ('o' <= c && c <= 'z') return 1;
        else return 0;
    case 53:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'd') return 1;
        else if (c == 'e') return 94;
        else if ('f' <= c && c <= 'z') return 1;
        else return 0;
    case 54:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'f') return 1;
        else if (c == 'g') return 23;
        else if ('h' <= c && c <= 'z') return 1;
        else return 0;
    case 55:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'h') return 1;
        else if (c == 'i') return 84;
        else if ('j' <= c && c <= 'z') return 1;
        else return 0;
    case 56:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'k') return 1;
        else if (c == 'l') return 12;
        else if ('m' <= c && c <= 'z') return 1;
        else return 0;
    case 57:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if (c == 'a') return 56;
        else if ('b' <= c && c <= 's') return 1;
        else if (c == 't') return 75;
        else if ('u' <= c && c <= 'z') return 1;
        else return 0;
    case 58:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'd') return 1;
        else if (c == 'e') return 57;
        else if ('f' <= c && c <= 'z') return 1;
        else return 0;
    case 59:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'm') return 1;
        else if (c == 'n') return 22;
        else if (c == 'o') return 54;
        else if ('p' <= c && c <= 'z') return 1;
        else return 0;
    case 60:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if (c == 'a') return 98;
        else if ('b' <= c && c <= 'z') return 1;
        else return 0;
    case 61:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'h') return 1;
        else if (c == 'i') return 86;
        else if ('j' <= c && c <= 'p') return 1;
        else if (c == 'q') return 74;
        else if ('r' <= c && c <= 'z') return 1;
        else return 0;
    case 62:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'n') return 1;
        else if (c == 'o') return 102;
        else if ('p' <= c && c <= 'z') return 1;
        else return 0;
    case 63:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'o') return 1;
        else if (c == 'p') return 21;
        else if ('q' <= c && c <= 'z') return 1;
        else return 0;
    case 64:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'q') return 1;
        else if (c == 'r') return 95;
        else if ('s' <= c && c <= 'z') return 1;
        else return 0;
    case 65:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if (c == 'a') return 87;
        else if ('b' <= c && c <= 'n') return 1;
        else if (c == 'o') return 79;
        else if ('p' <= c && c <= 'z') return 1;
        else return 0;
    case 66:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'n') return 1;
        else if (c == 'o') return 96;
        else if ('p' <= c && c <= 't') return 1;
        else if (c == 'u') return 90;
        else if ('v' <= c && c <= 'z') return 1;
        else return 0;
    case 67:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'r') return 1;
        else if (c == 's') return 51;
        else if ('t' <= c && c <= 'z') return 1;
        else return 0;
    case 68:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'k') return 1;
        else if (c == 'l') return 67;
        else if ('m' <= c && c <= 'w') return 1;
        else if (c == 'x') return 63;
        else if ('y' <= c && c <= 'z') return 1;
        else return 0;
    case 69:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'n') return 1;
        else if (c == 'o') return 88;
        else if ('p' <= c && c <= 'z') return 1;
        else return 0;
    case 70:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 's') return 1;
        else if (c == 't') return 14;
        else if ('u' <= c && c <= 'z') return 1;
        else return 0;
    case 71:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'b') return 1;
        else if (c == 'c') return 103;
        else if ('d' <= c && c <= 'z') return 1;
        else return 0;
    case 72:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'm') return 1;
        else if (c == 'n') return 70;
        else if ('o' <= c && c <= 'z') return 1;
        else return 0;
    case 73:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'h') return 1;
        else if (c == 'i') return 72;
        else if ('j' <= c && c <= 'z') return 1;
        else return 0;
    case 74:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'q') return 1;
        else if (c == 'r') return 89;
        else if ('s' <= c && c <= 'z') return 1;
        else return 0;
    case 75:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 't') return 1;
        else if (c == 'u') return 64;
        else if ('v' <= c && c <= 'z') return 1;
        else return 0;
    case 76:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'o') return 1;
        else if (c == 'p') return 91;
        else if ('q' <= c && c <= 'z') return 1;
        else return 0;
    case 77:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 's') return 1;
        else if (c == 't') return 76;
        else if ('u' <= c && c <= 'z') return 1;
        else return 0;
    case 78:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 't') return 1;
        else if (c == 'u') return 77;
        else if ('v' <= c && c <= 'z') return 1;
        else return 0;
    case 79:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'v') return 1;
        else if (c == 'w') return 25;
        else if ('x' <= c && c <= 'z') return 1;
        else return 0;
    case 80:
        if ('0' <= c && c <= '9') return 80;
        else return 0;
    case 81:
        if ((char)0 <= c && c <= ')') return 81;
        else if (c == '*') return 93;
        else if ('+' <= c && c <= (char)127) return 81;
        else return 0;
    case 82:
        if (c == '+') return 83;
        else if (c == '-') return 83;
        else if ('0' <= c && c <= '9') return 80;
        else return 0;
    case 83:
        if ('0' <= c && c <= '9') return 80;
        else return 0;
    case 84:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'e') return 1;
        else if (c == 'f') return 7;
        else if ('g' <= c && c <= 'z') return 1;
        else return 0;
    case 85:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'k') return 1;
        else if (c == 'l') return 50;
        else if ('m' <= c && c <= 'z') return 1;
        else return 0;
    case 86:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'm') return 1;
        else if (c == 'n') return 19;
        else if ('o' <= c && c <= 'z') return 1;
        else return 0;
    case 87:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'q') return 1;
        else if (c == 'r') return 49;
        else if ('s' <= c && c <= 'z') return 1;
        else return 0;
    case 88:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'r') return 1;
        else if (c == 's') return 20;
        else if ('t' <= c && c <= 'z') return 1;
        else return 0;
    case 89:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 's') return 1;
        else if (c == 't') return 24;
        else if ('u' <= c && c <= 'z') return 1;
        else return 0;
    case 90:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'm') return 1;
        else if (c == 'n') return 71;
        else if ('o' <= c && c <= 'z') return 1;
        else return 0;
    case 91:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 't') return 1;
        else if (c == 'u') return 97;
        else if ('v' <= c && c <= 'z') return 1;
        else return 0;
    case 92:
        if ((char)0 <= c && c <= (char)9) return 92;
        else if (c == (char)10) return 41;
        else if ((char)11 <= c && c <= (char)127) return 92;
        else return 0;
    case 93:
        if ((char)0 <= c && c <= ')') return 81;
        else if (c == '*') return 93;
        else if ('+' <= c && c <= '.') return 81;
        else if (c == '/') return 42;
        else if ('0' <= c && c <= (char)127) return 81;
        else return 0;
    case 94:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'e') return 1;
        else if (c == 'f') return 8;
        else if ('g' <= c && c <= 'z') return 1;
        else return 0;
    case 95:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'm') return 1;
        else if (c == 'n') return 15;
        else if ('o' <= c && c <= 'z') return 1;
        else return 0;
    case 96:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'q') return 1;
        else if (c == 'r') return 16;
        else if ('s' <= c && c <= 'z') return 1;
        else return 0;
    case 97:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 's') return 1;
        else if (c == 't') return 10;
        else if ('u' <= c && c <= 'z') return 1;
        else return 0;
    case 98:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'm') return 1;
        else if (c == 'n') return 55;
        else if ('o' <= c && c <= 'z') return 1;
        else return 0;
    case 99:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 's') return 1;
        else if (c == 't') return 9;
        else if ('u' <= c && c <= 'z') return 1;
        else return 0;
    case 100:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 't') return 1;
        else if (c == 'u') return 99;
        else if ('v' <= c && c <= 'z') return 1;
        else return 0;
    case 101:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'o') return 1;
        else if (c == 'p') return 100;
        else if ('q' <= c && c <= 'z') return 1;
        else return 0;
    case 102:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 'm') return 1;
        else if (c == 'n') return 6;
        else if ('o' <= c && c <= 'z') return 1;
        else return 0;
    case 103:
        if ('0' <= c && c <= '9') return 1;
        else if ('A' <= c && c <= 'Z') return 1;
        else if (c == '_') return 1;
        else if ('a' <= c && c <= 's') return 1;
        else if (c == 't') return 4;
        else if ('u' <= c && c <= 'z') return 1;
        else return 0;
    }
    return 0;
}
int Lfunc::action(int state)
{
    switch (state)
    {
    case 1:
        return 1;//id: id
    case 2:
        return 2;//number: integer
    case 3:
        return 3;//number: realC
    case 4:
        return 4;//reserved: funct
    case 5:
        return 5;//reserved: manifold
    case 6:
        return 6;//reserved: function
    case 7:
        return 7;//reserved: manif
    case 8:
        return 8;//reserved: def
    case 9:
        return 9;//reserved: input
    case 10:
        return 10;//reserved: output
    case 11:
        return 11;//reserved: para
    case 12:
        return 12;//reserved: real
    case 13:
        return 13;//reserved: sint
    case 14:
        return 14;//reserved: uint
    case 15:
        return 15;//reserved: return
    case 16:
        return 16;//reserved: for
    case 17:
        return 17;//reserved: if
    case 18:
        return 18;//reserved: else
    case 19:
        return 19;//function1: sin
    case 20:
        return 20;//function1: cos
    case 21:
        return 21;//function1: exp
    case 22:
        return 22;//function1: ln
    case 23:
        return 23;//function1: log
    case 24:
        return 24;//function1: sqrt
    case 25:
        return 25;//function2: pow
    case 26:
        return 26;//format: spaces
    case 27:
        return 27;//format: enters
    case 28:
        return 28;//format: tab
    case 29:
        return 29;//division: semicolon
    case 30:
        return 30;//division: colon
    case 31:
        return 31;//division: dot
    case 32:
        return 32;//division: comma
    case 33:
        return 33;//braket: braceL
    case 34:
        return 34;//braket: braceR
    case 35:
        return 35;//braket: left
    case 36:
        return 36;//braket: right
    case 37:
        return 37;//braket: squareL
    case 38:
        return 38;//braket: squareR
    case 39:
        return 39;//braket: angleL
    case 40:
        return 40;//braket: angleR
    case 41:
        return 41;//anntation: anntationS
    case 42:
        return 42;//anntation: anntationM
    case 43:
        return 43;//operation: sub
    case 44:
        return 44;//operation: add
    case 45:
        return 45;//operation: multi
    case 46:
        return 46;//operation: div
    case 47:
        return 47;//value: value
    case 49:
        return 1;//id: id
    case 50:
        return 1;//id: id
    case 51:
        return 1;//id: id
    case 52:
        return 1;//id: id
    case 53:
        return 1;//id: id
    case 54:
        return 1;//id: id
    case 55:
        return 1;//id: id
    case 56:
        return 1;//id: id
    case 57:
        return 1;//id: id
    case 58:
        return 1;//id: id
    case 59:
        return 1;//id: id
    case 60:
        return 1;//id: id
    case 61:
        return 1;//id: id
    case 62:
        return 1;//id: id
    case 63:
        return 1;//id: id
    case 64:
        return 1;//id: id
    case 65:
        return 1;//id: id
    case 66:
        return 1;//id: id
    case 67:
        return 1;//id: id
    case 68:
        return 1;//id: id
    case 69:
        return 1;//id: id
    case 70:
        return 1;//id: id
    case 71:
        return 1;//id: id
    case 72:
        return 1;//id: id
    case 73:
        return 1;//id: id
    case 74:
        return 1;//id: id
    case 75:
        return 1;//id: id
    case 76:
        return 1;//id: id
    case 77:
        return 1;//id: id
    case 78:
        return 1;//id: id
    case 79:
        return 1;//id: id
    case 80:
        return 3;//number: realC
    case 84:
        return 1;//id: id
    case 85:
        return 1;//id: id
    case 86:
        return 1;//id: id
    case 87:
        return 1;//id: id
    case 88:
        return 1;//id: id
    case 89:
        return 1;//id: id
    case 90:
        return 1;//id: id
    case 91:
        return 1;//id: id
    case 94:
        return 1;//id: id
    case 95:
        return 1;//id: id
    case 96:
        return 1;//id: id
    case 97:
        return 1;//id: id
    case 98:
        return 1;//id: id
    case 99:
        return 1;//id: id
    case 100:
        return 1;//id: id
    case 101:
        return 1;//id: id
    case 102:
        return 1;//id: id
    case 103:
        return 1;//id: id
    }
    return 0;
}
int Lfunc::GroupGet(int accept)
{
    switch (accept)
    {
    case 1:
        return 1;//id: id
    case 2:
        return 2;//number: integer
    case 3:
        return 2;//number: realC
    case 4:
        return 3;//reserved: funct
    case 5:
        return 3;//reserved: manifold
    case 6:
        return 3;//reserved: function
    case 7:
        return 3;//reserved: manif
    case 8:
        return 3;//reserved: def
    case 9:
        return 3;//reserved: input
    case 10:
        return 3;//reserved: output
    case 11:
        return 3;//reserved: para
    case 12:
        return 3;//reserved: real
    case 13:
        return 3;//reserved: sint
    case 14:
        return 3;//reserved: uint
    case 15:
        return 3;//reserved: return
    case 16:
        return 3;//reserved: for
    case 17:
        return 3;//reserved: if
    case 18:
        return 3;//reserved: else
    case 19:
        return 4;//function1: sin
    case 20:
        return 4;//function1: cos
    case 21:
        return 4;//function1: exp
    case 22:
        return 4;//function1: ln
    case 23:
        return 4;//function1: log
    case 24:
        return 4;//function1: sqrt
    case 25:
        return 5;//function2: pow
    case 26:
        return 6;//format: spaces
    case 27:
        return 6;//format: enters
    case 28:
        return 6;//format: tab
    case 29:
        return 7;//division: semicolon
    case 30:
        return 7;//division: colon
    case 31:
        return 7;//division: dot
    case 32:
        return 7;//division: comma
    case 33:
        return 8;//braket: braceL
    case 34:
        return 8;//braket: braceR
    case 35:
        return 8;//braket: left
    case 36:
        return 8;//braket: right
    case 37:
        return 8;//braket: squareL
    case 38:
        return 8;//braket: squareR
    case 39:
        return 8;//braket: angleL
    case 40:
        return 8;//braket: angleR
    case 41:
        return 9;//anntation: anntationS
    case 42:
        return 9;//anntation: anntationM
    case 43:
        return 10;//operation: sub
    case 44:
        return 10;//operation: add
    case 45:
        return 10;//operation: multi
    case 46:
        return 10;//operation: div
    case 47:
        return 11;//value: value
    }
    return 0;
}

}
