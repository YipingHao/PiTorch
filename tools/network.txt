	NETWORK: net id left PARA right braceL NETBODY braceR;
	NETBODY:
	{
		net: NET_STATEMENT*;
	}
	NET_STATEMENT:
	{
		const: CONSTVAR;
		exp: ID assign EXP_RIGHT semicolon;
		def: def ID semicolon;
		//def2: def ID TENSOR semicolon;
		tensorDef1: TENSOR ID semicolon;//input para
		tensorDef2: TENSOR TENSORID assign TENSORVALUE semicolon;
	}
	
	TENSORID: ID INDEXLIST;
	TENSOR: tensor squareL VALUELIST squareR;
	INDEXLIST: angleL INDEXUNITS angleR;
	
	/*INDEXUNITS: 
	{
		single: ID2;
		multi: INDEXUNITS comma ID2;
	}
	ID2:
	{
		yes: id;
		no: sub;
	}*/

	INDEXUNITS: 
	{
		null: void;
		done: ID2;
	}
	ID2:
	{
		single: id;
		multi: ID2 comma id;
	}

	TENSORVALUE:
	{
		single: SUMSYMBOL TENSORID;
		single1: EXP_RIGHT SUMSYMBOL TENSORID;
		multi: SUMSYMBOL TENSORID OPERATOR TENSORID;
		singleF: TENSORID SQ_INDEXUNITS left TENSORID right;
		multiF: TENSORID SQ_INDEXUNITS left TENSORID comma TENSORID right;
		//singleF: id INDEXLIST SQ_INDEXUNITS left TENSORID right;
		//multiF: id INDEXLIST SQ_INDEXUNITS left TENSORID comma TENSORID right;
	}
	SUMSYMBOL:
	{
		single: sum id;
		multi: sum braceL INDEXUNITS braceR;
	}
	SQ_INDEXUNITS:
	{
		single: squareL INDEXUNITS squareR;
	}


