	SYMBOLIC: KEYWORD id left PARA right braceL SYMBOLICBODY braceR;
	PARA: <SYMBOLICPARAS>;
	<SYMBOLICPARAS>:
	{
		single: SYMBOLICPARA;
		multi: <SYMBOLICPARAS> comma SYMBOLICPARA;
	}
	SYMBOLICPARA:
	{
		input: input ID;
		para: para ID;
		output: output ID;
	}
	
	SYMBOLICBODY : DELARATIONS EXPRESSIONS;
	DELARATIONS: DELARATION*;
	DELARATION: def ID semicolon;
	EXPRESSIONS: EXPRESSION*;
	EXPRESSION: ID value EXP_RIGHT semicolon;
	EXP_RIGHT:
	{
		<implicit>: EXP_MUL;
		add: EXP_RIGHT [operatas] EXP_MUL;
	}
	EXP_MUL:
	{
		<implicit>: EXP_MINUS;
		multi: EXP_MUL [operatmd] EXP_MINUS;
	}
	EXP_MINUS:
	{
		<implicit>: UNIT;
		plus: [operatas] UNIT;
	}
	UNIT:
	{
		id: ID;
		call: CALL;
		const: [number];
		complex: left EXP_RIGHT right;
	}
	ID:
	{
		array: id squareL integer squareR;
		single: id;
	}
	CALL:
	{
		call_1: [function1] left EXP_RIGHT right; 
		call_2: [function2] left EXP_RIGHT comma EXP_RIGHT right; 
	};

	KEYWORD:
	{
		manif: <MANIFWORD>;
		func: <FUNCTWORD>;
	};
	<MANIFWORD>: 
	{
		manifold: manifold;
		manif: manif;
	};
	<FUNCTWORD>:
	{
		function: function;
		func: func;
	};